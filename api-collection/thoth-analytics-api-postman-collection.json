{
  "info": {
    "_postman_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "name": "Thoth Analytics API - Sprint 05",
    "description": "Colecci√≥n completa de endpoints para Thoth Analytics API con autenticaci√≥n JWT, multi-tenancy, sistema de auditor√≠a, scraper integration, AI processing con an√°lisis multi-capa y Dashboard & Visualization con filtros avanzados. ‚úÖ TODOS LOS ENDPOINTS PROBADOS Y FUNCIONANDO - Sprint 5 COMPLETADO (31 JUL 2025)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "üè• Health",
      "item": [
        {
          "name": "Welcome",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîê Auth",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test de respuesta exitosa",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "// üéØ GUARDAR TOKENS AUTOM√ÅTICAMENTE",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.accessToken) {",
                  "    pm.collectionVariables.set(\"auth_token\", response.data.accessToken);",
                  "    pm.collectionVariables.set(\"refresh_token\", response.data.refreshToken);",
                  "    pm.collectionVariables.set(\"user_id\", response.user.id);",
                  "    pm.collectionVariables.set(\"tenant_id\", response.user.tenantId);",
                  "    pm.collectionVariables.set(\"user_role\", response.user.role);",
                  "    ",
                  "    console.log('‚úÖ Tokens guardados autom√°ticamente!');",
                  "    console.log('üë§ Usuario:', response.user.email);",
                  "    console.log('üîë Rol:', response.user.role);",
                  "    console.log('üè¢ Tenant:', response.user.tenantId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@thoth.mx\",\n  \"password\": \"SuperAdmin2025!@#\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Endpoint de autenticaci√≥n. Los tokens se guardan autom√°ticamente en las variables de la colecci√≥n."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// üîÑ ACTUALIZAR TOKENS AUTOM√ÅTICAMENTE",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.accessToken) {",
                  "    pm.collectionVariables.set(\"auth_token\", response.data.accessToken);",
                  "    pm.collectionVariables.set(\"refresh_token\", response.data.refreshToken);",
                  "    console.log('üîÑ Tokens actualizados!');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// üö™ LIMPIAR TOKENS AUTOM√ÅTICAMENTE",
                  "pm.collectionVariables.unset(\"auth_token\");",
                  "pm.collectionVariables.unset(\"refresh_token\");",
                  "pm.collectionVariables.unset(\"user_id\");",
                  "pm.collectionVariables.unset(\"tenant_id\");",
                  "pm.collectionVariables.unset(\"user_role\");",
                  "console.log('üö™ Sesi√≥n cerrada y tokens eliminados');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë• Users",
      "item": [
        {
          "name": "List Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "DIRECTOR_COMUNICACION",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nuevo.usuario@ejemplo.com\",\n  \"username\": \"nuevo_usuario\",\n  \"password\": \"Password123!@#\",\n  \"role\": \"ASISTENTE\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId"],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Violaci√≥n de pol√≠ticas de uso\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:userId/suspend",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId", "suspend"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reactivate User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/reactivate",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId", "reactivate"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmation\": \"DELETE_USER_PERMANENTLY\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/stats",
              "host": ["{{base_url}}"],
              "path": ["users", "stats"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè¢ Tenants",
      "item": [
        {
          "name": "List Tenants",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants",
              "host": ["{{base_url}}"],
              "path": ["tenants"],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "GOVERNMENT_STATE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_tenant_id\", response.data.id);",
                  "    console.log('üè¢ Tenant creado:', response.data.name);",
                  "    console.log('üìç ID:', response.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gobierno del Estado de M√©xico\",\n  \"type\": \"GOVERNMENT_STATE\",\n  \"settings\": {\n    \"timezone\": \"America/Mexico_City\",\n    \"language\": \"es-MX\",\n    \"features\": {\n      \"aiAnalysis\": true,\n      \"alertSystem\": true,\n      \"newsMonitoring\": true,\n      \"tweetAnalysis\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants",
              "host": ["{{base_url}}"],
              "path": ["tenants"]
            },
            "description": "Solo SUPER_ADMIN puede crear tenants"
          },
          "response": []
        },
        {
          "name": "Get Tenant by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gobierno del Estado de M√©xico - Actualizado\",\n  \"settings\": {\n    \"timezone\": \"America/Mexico_City\",\n    \"language\": \"es-MX\",\n    \"theme\": \"dark\",\n    \"features\": {\n      \"aiAnalysis\": true,\n      \"alertSystem\": true,\n      \"newsMonitoring\": true,\n      \"tweetAnalysis\": true,\n      \"clustering\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Falta de pago de licencia\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/suspend",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "suspend"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede suspender tenants"
          },
          "response": []
        },
        {
          "name": "Reactivate Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/reactivate",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "reactivate"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede reactivar tenants"
          },
          "response": []
        },
        {
          "name": "Delete Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmation\": \"DELETE_TENANT_PERMANENTLY\",\n  \"reason\": \"Cierre definitivo de operaciones\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede eliminar tenants. Requiere confirmaci√≥n expl√≠cita."
          },
          "response": []
        },
        {
          "name": "Get Tenant Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/stats",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "stats"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{tenant_id}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä Audit",
      "item": [
        {
          "name": "Get Audit Logs",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/logs",
              "host": ["{{base_url}}"],
              "path": ["audit", "logs"],
              "query": [
                {
                  "key": "action",
                  "value": "LOGIN",
                  "disabled": true
                },
                {
                  "key": "entityType",
                  "value": "USER",
                  "disabled": true
                },
                {
                  "key": "userId",
                  "value": "{{user_id}}",
                  "disabled": true
                },
                {
                  "key": "startDate",
                  "value": "2025-07-01",
                  "disabled": true
                },
                {
                  "key": "endDate",
                  "value": "2025-07-31",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "20",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Audit Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/stats",
              "host": ["{{base_url}}"],
              "path": ["audit", "stats"],
              "query": [
                {
                  "key": "period",
                  "value": "week",
                  "description": "day, week, month, year"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Export Audit Logs",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"format\": \"CSV\",\n  \"filters\": {\n    \"startDate\": \"2025-07-01\",\n    \"endDate\": \"2025-07-31\",\n    \"action\": \"LOGIN\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/audit/export",
              "host": ["{{base_url}}"],
              "path": ["audit", "export"]
            },
            "description": "Formatos disponibles: CSV, JSON, PDF"
          },
          "response": []
        },
        {
          "name": "Get Anomalies",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/anomalies",
              "host": ["{{base_url}}"],
              "path": ["audit", "anomalies"],
              "query": [
                {
                  "key": "threshold",
                  "value": "10",
                  "description": "N√∫mero de intentos para considerar anomal√≠a"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check Integrity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"logIds\": [\"log-id-1\", \"log-id-2\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/audit/integrity",
              "host": ["{{base_url}}"],
              "path": ["audit", "integrity"]
            }
          },
          "response": []
        },
        {
          "name": "Get Logs by Entity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/entity/:entityType/:entityId",
              "host": ["{{base_url}}"],
              "path": ["audit", "entity", ":entityType", ":entityId"],
              "variable": [
                {
                  "key": "entityType",
                  "value": "USER"
                },
                {
                  "key": "entityId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Activity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/users/:userId/activity",
              "host": ["{{base_url}}"],
              "path": ["audit", "users", ":userId", "activity"],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ],
              "query": [
                {
                  "key": "days",
                  "value": "30",
                  "description": "√öltimos N d√≠as de actividad"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîß Scrapers",
      "item": [
        {
          "name": "Create Tweet",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('tweetId');",
                  "    pm.expect(jsonData.data).to.have.property('contentHash');",
                  "    pm.expect(jsonData.data).to.have.property('isDuplicate');",
                  "});",
                  "",
                  "// Save tweet ID for further requests",
                  "const response = pm.response.json();",
                  "if (response.success && response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_tweet_id\", response.data.id);",
                  "    pm.collectionVariables.set(\"last_tweet_content_hash\", response.data.contentHash);",
                  "    console.log('üê¶ Tweet creado:', response.data.tweetId);",
                  "    console.log('üÜî ID:', response.data.id);",
                  "    console.log('üîó Hash:', response.data.contentHash);",
                  "    if (response.data.isDuplicate) {",
                  "        console.log('‚ö†Ô∏è Tweet duplicado detectado');",
                  "    } else {",
                  "        console.log('‚úÖ Tweet nuevo procesado');",
                  "        if (response.data.aiJobId) {",
                  "            console.log('ü§ñ Job IA creado:', response.data.aiJobId);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"1234567890123456789\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"authorName\": \"Usuario Ejemplo\",\n  \"authorHandle\": \"@usuario_ejemplo\",\n  \"content\": \"Este es un tweet de ejemplo para probar el endpoint de scrapers #test #ejemplo\",\n  \"publishedAt\": \"2025-07-30T15:30:00.000Z\",\n  \"hashtags\": [\"#test\", \"#ejemplo\", \"#scrapers\"],\n  \"mentions\": [\"@thoth_analytics\", \"@gobierno_mx\"],\n  \"mediaUrls\": [\n    {\n      \"url\": \"https://pbs.twimg.com/media/example.jpg\",\n      \"type\": \"photo\",\n      \"thumbnailUrl\": \"https://pbs.twimg.com/media/example_thumb.jpg\"\n    }\n  ],\n  \"engagement\": {\n    \"retweetCount\": 15,\n    \"likeCount\": 42,\n    \"replyCount\": 8,\n    \"quoteCount\": 3\n  },\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Endpoint para que el scraper Python env√≠e tweets capturados. Detecta duplicados autom√°ticamente y crea jobs de IA."
          },
          "response": []
        },
        {
          "name": "Create Tweet (Duplicate Test)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"1234567890123456789\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"authorName\": \"Usuario Ejemplo\",\n  \"authorHandle\": \"@usuario_ejemplo\",\n  \"content\": \"Este es un tweet de ejemplo para probar el endpoint de scrapers #test #ejemplo\",\n  \"publishedAt\": \"2025-07-30T15:30:00.000Z\",\n  \"hashtags\": [\"#test\", \"#ejemplo\", \"#scrapers\"],\n  \"mentions\": [\"@thoth_analytics\", \"@gobierno_mx\"],\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Mismo tweet para probar detecci√≥n de duplicados. Debe retornar isDuplicate: true"
          },
          "response": []
        },
        {
          "name": "Create News",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('tweetId');",
                  "    pm.expect(jsonData.data).to.have.property('contentHash');",
                  "});",
                  "",
                  "// Save news ID",
                  "const response = pm.response.json();",
                  "if (response.success && response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_news_id\", response.data.id);",
                  "    console.log('üì∞ Noticia creada:', response.data.id);",
                  "    if (response.data.isDuplicate) {",
                  "        console.log('‚ö†Ô∏è Noticia duplicada detectada');",
                  "    } else {",
                  "        console.log('‚úÖ Noticia nueva procesada');",
                  "        if (response.data.aiJobId) {",
                  "            console.log('ü§ñ Job IA creado:', response.data.aiJobId);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"{{last_tweet_id}}\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"title\": \"Gobierno Anuncia Nuevas Pol√≠ticas de Transparencia\",\n  \"content\": \"El gobierno federal anunci√≥ hoy una serie de nuevas pol√≠ticas destinadas a mejorar la transparencia en las instituciones p√∫blicas. Las medidas incluyen la publicaci√≥n de datos en tiempo real sobre el uso de recursos p√∫blicos y la implementaci√≥n de sistemas de seguimiento ciudadano. Esta iniciativa forma parte de un esfuerzo m√°s amplio para combatir la corrupci√≥n y fortalecer la confianza p√∫blica en las instituciones gubernamentales.\",\n  \"url\": \"https://ejemplo.gob.mx/noticias/nuevas-politicas-transparencia-2025\",\n  \"extractedAt\": \"2025-07-30T15:35:00.000Z\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/news",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "news"]
            },
            "description": "Endpoint para que el extractor Python env√≠e noticias extra√≠das de URLs. Requiere que el tweet asociado exista."
          },
          "response": []
        },
        {
          "name": "Scrapers Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Health check structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('services');",
                  "    pm.expect(jsonData.services).to.have.property('database');",
                  "    pm.expect(jsonData).to.have.property('responseTime');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üè• Estado del servicio:', response.status);",
                  "console.log('‚è±Ô∏è Tiempo de respuesta:', response.responseTime + 'ms');",
                  "console.log('‚è∞ Uptime:', Math.floor(response.uptime / 60) + ' minutos');",
                  "console.log('üíæ Base de datos:', response.services.database);",
                  "",
                  "if (response.status === 'healthy') {",
                  "    console.log('‚úÖ Servicio de scrapers operativo');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Problemas detectados en el servicio');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/scrapers/health",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "health"]
            },
            "description": "Verificar estado del servicio de scrapers y conexiones a base de datos. No requiere autenticaci√≥n."
          },
          "response": []
        },
        {
          "name": "Scrapers Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stats structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('tweetsReceived');",
                  "    pm.expect(jsonData.data).to.have.property('newsReceived');",
                  "    pm.expect(jsonData.data).to.have.property('duplicatesBlocked');",
                  "    pm.expect(jsonData.data).to.have.property('aiJobsCreated');",
                  "    pm.expect(jsonData.data).to.have.property('avgResponseTime');",
                  "    pm.expect(jsonData.data).to.have.property('uptime');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä ESTAD√çSTICAS DE SCRAPERS:');",
                  "console.log('üê¶ Tweets recibidos:', response.data.tweetsReceived);",
                  "console.log('üì∞ Noticias recibidas:', response.data.newsReceived);",
                  "console.log('üö´ Duplicados bloqueados:', response.data.duplicatesBlocked);",
                  "console.log('ü§ñ Jobs IA creados:', response.data.aiJobsCreated);",
                  "console.log('‚ö° Tiempo promedio:', response.data.avgResponseTime + 'ms');",
                  "console.log('‚è∞ Uptime:', Math.floor(response.data.uptime / 60) + ' minutos');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/scrapers/stats",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "stats"]
            },
            "description": "Obtener estad√≠sticas del servicio de scrapers: tweets/noticias procesadas, duplicados, performance, etc."
          },
          "response": []
        },
        {
          "name": "Test Throttling (High Volume)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Este test puede devolver 429 si el throttling est√° habilitado",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Throttling working - Rate limit exceeded\", function () {",
                  "        pm.response.to.have.status(429);",
                  "    });",
                  "    console.log('üö¶ Rate limiting est√° funcionando correctamente');",
                  "    console.log('‚ö†Ô∏è Demasiadas requests - throttling activado');",
                  "} else if (pm.response.code === 201) {",
                  "    pm.test(\"Request successful - Within rate limits\", function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    console.log('‚úÖ Request dentro de los l√≠mites de throttling');",
                  "} else {",
                  "    pm.test(\"Unexpected response\", function () {",
                  "        pm.expect.fail('Status code: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"{{$randomInt}}\",\n  \"mediaSourceId\": \"media-source-test\",\n  \"authorName\": \"Test Throttling\",\n  \"authorHandle\": \"@test_throttling\",\n  \"content\": \"Tweet para probar throttling - {{$timestamp}}\",\n  \"publishedAt\": \"{{$isoTimestamp}}\",\n  \"tenantId\": \"test-tenant-throttling\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Request para probar throttling. Ejecutar m√∫ltiples veces r√°pido para verificar rate limiting. Configurar THROTTLING_ENABLED=true en .env"
          },
          "response": []
        }
      ]
    },
    {
      "name": "ü§ñ AI Processing",
      "item": [
        {
          "name": "Manual Analysis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Analysis structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('textAnalysis');",
                  "    pm.expect(jsonData).to.have.property('sentimentAnalysis');",
                  "    pm.expect(jsonData).to.have.property('entityRecognition');",
                  "    pm.expect(jsonData).to.have.property('riskAssessment');",
                  "    pm.expect(jsonData).to.have.property('processingTime');",
                  "    pm.expect(jsonData).to.have.property('totalCost');",
                  "});",
                  "",
                  "// Guardar ID del an√°lisis para otros tests",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('last_analysis_id', response.id);",
                  "",
                  "console.log('ü§ñ AN√ÅLISIS IA COMPLETADO:');",
                  "console.log('üìä ID:', response.id);",
                  "console.log('‚è±Ô∏è Tiempo procesamiento:', response.processingTime + 'ms');",
                  "console.log('üí∞ Costo total:', '$' + response.totalCost);",
                  "console.log('üìù Categor√≠a:', response.textAnalysis?.primaryCategory);",
                  "console.log('üòä Sentimiento:', response.sentimentAnalysis?.overallSentiment);",
                  "console.log('‚ö†Ô∏è Risk Score:', response.riskAssessment?.overallRiskScore + '/100');",
                  "console.log('üö® Urgency:', response.riskAssessment?.interventionUrgency);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contentType\": \"news\",\n  \"contentId\": \"{{$randomUUID}}\",\n  \"title\": \"Nuevo programa gubernamental para educaci√≥n digital en M√©xico\",\n  \"content\": \"El gobierno mexicano anunci√≥ hoy un ambicioso programa de educaci√≥n digital que beneficiar√° a m√°s de 2 millones de estudiantes en todo el pa√≠s. La iniciativa incluye la distribuci√≥n de tablets, capacitaci√≥n docente y mejora de infraestructura tecnol√≥gica en escuelas p√∫blicas. El presupuesto asignado es de 5 mil millones de pesos y se implementar√° durante los pr√≥ximos 3 a√±os. Los estados priorizados son Oaxaca, Chiapas y Guerrero, donde los √≠ndices de conectividad son menores. La Secretar√≠a de Educaci√≥n P√∫blica coordinar√° el programa junto con la Secretar√≠a de Comunicaciones y Transportes.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/ai-processing/analyze",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "analyze"]
            },
            "description": "Realizar an√°lisis manual completo de contenido (4 tipos: texto, sentimiento, entidades, riesgo)"
          },
          "response": []
        },
        {
          "name": "Get Analysis by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Analysis data structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData).to.have.property('sentiment');",
                  "    pm.expect(jsonData).to.have.property('relevance');",
                  "    pm.expect(jsonData).to.have.property('threatLevel');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìã AN√ÅLISIS RECUPERADO:');",
                  "console.log('üÜî ID:', response.id);",
                  "console.log('üìä Tipo:', response.type);",
                  "console.log('üòä Sentimiento:', response.sentiment);",
                  "console.log('üéØ Relevancia:', (response.relevance * 100).toFixed(1) + '%');",
                  "console.log('‚ö†Ô∏è Nivel amenaza:', response.threatLevel);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/analysis/{{last_analysis_id}}",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "analysis", "{{last_analysis_id}}"]
            },
            "description": "Obtener an√°lisis espec√≠fico por ID"
          },
          "response": []
        },
        {
          "name": "Get All Analyses",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Pagination structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.pagination).to.have.property('pages');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä LISTA DE AN√ÅLISIS:');",
                  "console.log('üìÑ P√°gina:', response.pagination.page + '/' + response.pagination.pages);",
                  "console.log('üìã Total an√°lisis:', response.pagination.total);",
                  "console.log('üîç An√°lisis en p√°gina:', response.data.length);",
                  "",
                  "if (response.data.length > 0) {",
                  "    console.log('üéØ √öltimo an√°lisis:');",
                  "    const latest = response.data[0];",
                  "    console.log('  üìä Tipo:', latest.type);",
                  "    console.log('  üòä Sentimiento:', latest.sentiment);",
                  "    console.log('  ‚ö†Ô∏è Amenaza:', latest.threatLevel);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/analyses?page=1&limit=10&contentType=news",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "analyses"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "contentType",
                  "value": "news"
                },
                {
                  "key": "riskLevel",
                  "value": "high",
                  "disabled": true
                }
              ]
            },
            "description": "Obtener lista paginada de an√°lisis con filtros opcionales"
          },
          "response": []
        },
        {
          "name": "Processing Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stats structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalAnalyses');",
                  "    pm.expect(jsonData).to.have.property('todayAnalyses');",
                  "    pm.expect(jsonData).to.have.property('totalCost');",
                  "    pm.expect(jsonData).to.have.property('todayCost');",
                  "    pm.expect(jsonData).to.have.property('averageProcessingTime');",
                  "    pm.expect(jsonData).to.have.property('riskDistribution');",
                  "    pm.expect(jsonData).to.have.property('sentimentDistribution');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìà ESTAD√çSTICAS IA PROCESSING:');",
                  "console.log('üìä Total an√°lisis:', response.totalAnalyses);",
                  "console.log('üìÖ An√°lisis hoy:', response.todayAnalyses);",
                  "console.log('üí∞ Costo total:', '$' + response.totalCost.toFixed(4));",
                  "console.log('üí∏ Costo hoy:', '$' + response.todayCost.toFixed(4));",
                  "console.log('‚è±Ô∏è Tiempo promedio:', response.averageProcessingTime + 'ms');",
                  "console.log('‚ö†Ô∏è Distribuci√≥n riesgo:', JSON.stringify(response.riskDistribution));",
                  "console.log('üòä Distribuci√≥n sentimiento:', JSON.stringify(response.sentimentDistribution));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/stats",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "stats"]
            },
            "description": "Obtener estad√≠sticas de procesamiento IA: an√°lisis totales, costos, tiempos, distribuciones"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Health structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('services');",
                  "    pm.expect(jsonData).to.have.property('responseTime');",
                  "    pm.expect(jsonData.services).to.have.property('database');",
                  "    pm.expect(jsonData.services).to.have.property('openai');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üè• HEALTH CHECK AI PROCESSING:');",
                  "console.log('‚úÖ Status:', response.status);",
                  "console.log('üóÑÔ∏è Database:', response.services.database);",
                  "console.log('ü§ñ OpenAI:', response.services.openai);",
                  "console.log('‚ö° Response time:', response.responseTime + 'ms');",
                  "",
                  "if (response.status === 'healthy') {",
                  "    console.log('üéâ Todos los servicios funcionando correctamente');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Algunos servicios tienen problemas');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/health",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "health"]
            },
            "description": "Verificar estado de salud del servicio de procesamiento IA"
          },
          "response": []
        },
        {
          "name": "Queue Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Queue status structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('pending');",
                  "    pm.expect(jsonData).to.have.property('processing');",
                  "    pm.expect(jsonData).to.have.property('completed');",
                  "    pm.expect(jsonData).to.have.property('failed');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üîÑ ESTADO DE LA COLA IA:');",
                  "console.log('‚è≥ Pendientes:', response.pending);",
                  "console.log('üîÑ Procesando:', response.processing);",
                  "console.log('‚úÖ Completados:', response.completed);",
                  "console.log('‚ùå Fallidos:', response.failed);",
                  "console.log('üìä Total:', response.total);",
                  "",
                  "const completionRate = response.total > 0 ? ((response.completed / response.total) * 100).toFixed(1) : 0;",
                  "console.log('üìà Tasa de √©xito:', completionRate + '%');",
                  "",
                  "if (response.pending > 10) {",
                  "    console.log('‚ö†Ô∏è Cola con muchos jobs pendientes');",
                  "} else if (response.failed > 5) {",
                  "    console.log('üö® Muchos jobs fallidos - revisar configuraci√≥n');",
                  "} else {",
                  "    console.log('‚úÖ Cola funcionando normalmente');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/status",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "status"]
            },
            "description": "Obtener estado de la cola de procesamiento IA: jobs pendientes, procesando, completados, fallidos"
          },
          "response": []
        },
        {
          "name": "Queue Worker Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Worker stats structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('isRunning');",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "    pm.expect(jsonData).to.have.property('config');",
                  "    pm.expect(jsonData.stats).to.have.property('pending');",
                  "    pm.expect(jsonData.stats).to.have.property('processing');",
                  "    pm.expect(jsonData.stats).to.have.property('completed');",
                  "    pm.expect(jsonData.stats).to.have.property('failed');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('‚öôÔ∏è ESTAD√çSTICAS DEL WORKER:');",
                  "console.log('üîÑ Estado:', response.isRunning ? 'Ejecut√°ndose' : 'Detenido');",
                  "console.log('üìä Jobs pendientes:', response.stats.pending);",
                  "console.log('‚ö° Jobs procesando:', response.stats.processing);",
                  "console.log('‚úÖ Jobs completados:', response.stats.completed);",
                  "console.log('‚ùå Jobs fallidos:', response.stats.failed);",
                  "console.log('üìà Total:', response.stats.total);",
                  "console.log('‚è±Ô∏è Tiempo promedio:', Math.round(response.stats.averageProcessingTimeMs) + 'ms');",
                  "console.log('üîß Batch size:', response.config.batchSize);",
                  "console.log('‚è∞ Intervalo:', response.config.processingIntervalMs + 'ms');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/worker/stats",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "worker", "stats"]
            },
            "description": "Obtener estad√≠sticas detalladas del worker de procesamiento: estado, configuraci√≥n, m√©tricas"
          },
          "response": []
        },
        {
          "name": "Queue Jobs List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Jobs list structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìã LISTA DE JOBS:');",
                  "console.log('üìä Total jobs:', response.pagination.total);",
                  "console.log('üìÑ P√°gina:', response.pagination.page + '/' + response.pagination.pages);",
                  "console.log('üî¢ Jobs en p√°gina:', response.data.length);",
                  "",
                  "if (response.data.length > 0) {",
                  "    const job = response.data[0];",
                  "    console.log('üî∏ Primer job:');",
                  "    console.log('  üìå ID:', job.id);",
                  "    console.log('  üìä Estado:', job.status);",
                  "    console.log('  üéØ Prioridad:', job.priority);",
                  "    console.log('  üîÑ Intentos:', job.attempts);",
                  "    console.log('  üìÖ Programado:', new Date(job.scheduledAt).toLocaleString());",
                  "    ",
                  "    // Guardar ID del primer job para otros tests",
                  "    pm.collectionVariables.set('first_job_id', job.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/jobs?page=1&limit=10&status=PENDING",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "PENDING",
                  "description": "PENDING, PROCESSING, COMPLETED, FAILED"
                }
              ]
            },
            "description": "Obtener lista paginada de jobs con filtros opcionales por estado"
          },
          "response": []
        },
        {
          "name": "Start Worker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.contain('started');",
                  "});",
                  "",
                  "console.log('üöÄ Worker iniciado correctamente');",
                  "console.log('‚ö° El procesamiento autom√°tico est√° activo');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/worker/start",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "worker", "start"]
            },
            "description": "Iniciar el worker de procesamiento de cola manualmente"
          },
          "response": []
        },
        {
          "name": "Stop Worker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.contain('stopped');",
                  "});",
                  "",
                  "console.log('üõë Worker detenido correctamente');",
                  "console.log('‚è∏Ô∏è El procesamiento autom√°tico est√° pausado');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/worker/stop",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "worker", "stop"]
            },
            "description": "Detener el worker de procesamiento de cola manualmente"
          },
          "response": []
        },
        {
          "name": "Retry Failed Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Retry confirmation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('jobId');",
                  "    pm.expect(jsonData.message).to.contain('retry');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('‚ôªÔ∏è Job programado para reintento');",
                  "console.log('üÜî Job ID:', response.jobId);",
                  "console.log('‚úÖ El job volver√° a procesarse autom√°ticamente');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/retry/{{first_job_id}}",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "retry", "{{first_job_id}}"]
            },
            "description": "Reintentar un job que fall√≥. Solo funciona con jobs en estado FAILED"
          },
          "response": []
        },
        {
          "name": "Cancel Pending Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Cancel confirmation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('jobId');",
                  "    pm.expect(jsonData.message).to.contain('cancelled');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üö´ Job cancelado correctamente');",
                  "console.log('üÜî Job ID:', response.jobId);",
                  "console.log('‚ùå El job no ser√° procesado');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ai-processing/queue/cancel/{{first_job_id}}",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "queue", "cancel", "{{first_job_id}}"]
            },
            "description": "Cancelar un job pendiente. Solo funciona con jobs en estado PENDING"
          },
          "response": []
        },
        {
          "name": "Analyze Tweet Sample",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üê¶ AN√ÅLISIS DE TWEET:');",
                  "console.log('üìä Risk Score:', response.riskAssessment?.overallRiskScore + '/100');",
                  "console.log('üòä Sentiment:', response.sentimentAnalysis?.overallSentiment + ' (' + response.sentimentAnalysis?.sentimentScore + ')');",
                  "console.log('üèõÔ∏è Entidades gobierno:', response.entityRecognition?.governmentEntities?.length || 0);",
                  "console.log('üë• Personas:', response.entityRecognition?.persons?.length || 0);",
                  "console.log('üìç Ubicaciones:', response.entityRecognition?.locations?.length || 0);",
                  "console.log('üè¢ Organizaciones:', response.entityRecognition?.organizations?.length || 0);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contentType\": \"tweet\",\n  \"contentId\": \"{{$randomUUID}}\",\n  \"title\": \"Tweet de an√°lisis pol√≠tico\",\n  \"content\": \"üö® URGENTE: La @SEP_mx anuncia recorte del 30% al presupuesto educativo para 2025. Esto afectar√° a millones de estudiantes en M√©xico. Los maestros de #Oaxaca ya protestan en el Z√≥calo. El presidente @lopezobrador_ debe dar explicaciones inmediatas. #Educaci√≥nEnCrisis #M√©xico\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/ai-processing/analyze",
              "host": ["{{base_url}}"],
              "path": ["ai-processing", "analyze"]
            },
            "description": "An√°lisis de tweet con contenido pol√≠tico para probar detecci√≥n de entidades, sentiment y riesgo"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä Dashboard",
      "item": [
        {
          "name": "Dashboard Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Dashboard structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('metrics');",
                  "    pm.expect(jsonData).to.have.property('sentimentTrends');",
                  "    pm.expect(jsonData).to.have.property('riskDistribution');",
                  "    pm.expect(jsonData).to.have.property('topEntities');",
                  "    pm.expect(jsonData).to.have.property('sourceMetrics');",
                  "    pm.expect(jsonData).to.have.property('activityByHour');",
                  "    pm.expect(jsonData).to.have.property('alertsSummary');",
                  "    pm.expect(jsonData).to.have.property('generatedAt');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä DASHBOARD OVERVIEW:');",
                  "console.log('üìà Total tweets:', response.metrics.totalTweets);",
                  "console.log('üì∞ Total noticias:', response.metrics.totalNews);",
                  "console.log('üîç Total an√°lisis:', response.metrics.totalAnalysis);",
                  "console.log('üö® Total alertas:', response.metrics.totalAlerts);",
                  "console.log('‚ö†Ô∏è Alertas activas:', response.metrics.activeAlerts);",
                  "console.log('üòä Sentimiento promedio:', response.metrics.averageSentimentScore.toFixed(1));",
                  "console.log('üéØ Risk Score promedio:', response.metrics.averageRiskScore.toFixed(1));",
                  "console.log('‚ö° Cola procesamiento:', response.metrics.processingQueueSize);",
                  "console.log('üîÑ Generado:', new Date(response.generatedAt).toLocaleString());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/overview?startDate=2025-01-01&endDate=2025-12-31",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "overview"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01",
                  "description": "Fecha inicio para filtrar datos (opcional)"
                },
                {
                  "key": "endDate", 
                  "value": "2025-12-31",
                  "description": "Fecha fin para filtrar datos (opcional)"
                }
              ]
            },
            "description": "Obtener vista completa del dashboard con m√©tricas, tendencias, distribuciones y res√∫menes"
          },
          "response": []
        },
        {
          "name": "Dashboard Metrics Only",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Metrics structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalTweets');",
                  "    pm.expect(jsonData).to.have.property('totalNews');",
                  "    pm.expect(jsonData).to.have.property('totalAnalysis');",
                  "    pm.expect(jsonData).to.have.property('totalAlerts');",
                  "    pm.expect(jsonData).to.have.property('activeAlerts');",
                  "    pm.expect(jsonData).to.have.property('averageRiskScore');",
                  "    pm.expect(jsonData).to.have.property('averageSentimentScore');",
                  "    pm.expect(jsonData).to.have.property('processingQueueSize');",
                  "    pm.expect(jsonData).to.have.property('lastUpdate');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä M√âTRICAS R√ÅPIDAS:');",
                  "console.log('üìà Tweets:', response.totalTweets);",
                  "console.log('üì∞ Noticias:', response.totalNews);",
                  "console.log('üîç Analyses:', response.totalAnalysis);",
                  "console.log('üö® Alertas:', response.totalAlerts + ' (activas: ' + response.activeAlerts + ')');",
                  "console.log('üòä Sentimiento:', response.averageSentimentScore.toFixed(1) + '/100');",
                  "console.log('‚ö†Ô∏è Riesgo:', response.averageRiskScore.toFixed(1) + '/100');",
                  "console.log('‚ö° Cola:', response.processingQueueSize + ' jobs pendientes');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/metrics",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "metrics"]
            },
            "description": "Endpoint m√°s r√°pido para obtener solo las m√©tricas principales del dashboard"
          },
          "response": []
        },
        {
          "name": "Sentiment Trends",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/trends/sentiment?startDate=2025-01-01&endDate=2025-01-31",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "trends", "sentiment"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-31"
                }
              ]
            },
            "description": "Obtener tendencias de an√°lisis de sentimientos a lo largo del tiempo"
          },
          "response": []
        },
        {
          "name": "Risk Trends",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/trends/risk?startDate=2025-01-01&endDate=2025-01-31",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "trends", "risk"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-31"
                }
              ]
            },
            "description": "Obtener tendencias de evaluaci√≥n de riesgos a lo largo del tiempo"
          },
          "response": []
        },
        {
          "name": "Top Entities",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/entities/top",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "entities", "top"]
            },
            "description": "Obtener las entidades y temas m√°s mencionados"
          },
          "response": []
        },
        {
          "name": "Source Metrics",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/sources/metrics",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "sources", "metrics"]
            },
            "description": "Obtener m√©tricas de rendimiento de fuentes de contenido"
          },
          "response": []
        },
        {
          "name": "Activity by Hour",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/activity/hourly",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "activity", "hourly"]
            },
            "description": "Obtener actividad de contenido por hora del d√≠a"
          },
          "response": []
        },
        {
          "name": "Alerts Summary",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/alerts/summary",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "alerts", "summary"]
            },
            "description": "Obtener resumen de alertas y conteo de alertas activas"
          },
          "response": []
        },
        {
          "name": "Dashboard Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/dashboard/health",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "health"]
            },
            "description": "Health check del servicio de dashboard"
          },
          "response": []
        },
        {
          "name": "Advanced Search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Advanced search structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('results');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData).to.have.property('filters');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "    pm.expect(jsonData.pagination).to.have.property('totalPages');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üîç B√öSQUEDA AVANZADA:');",
                  "console.log('üìä Total resultados:', response.pagination.total);",
                  "console.log('üìÑ P√°gina:', response.pagination.page + '/' + response.pagination.totalPages);",
                  "console.log('üìã Resultados en p√°gina:', response.results.length);",
                  "console.log('üîç Query:', response.query || 'Sin query de texto');",
                  "console.log('üìä Filtros aplicados:');",
                  "console.log('  üìù Tipos contenido:', response.filters.contentTypes);",
                  "console.log('  üì∞ Fuentes:', response.filters.sources);",
                  "console.log('  üè∑Ô∏è Tags:', response.filters.tags);",
                  "console.log('  üòä Rango sentimiento:', response.filters.sentimentRange.min + '-' + response.filters.sentimentRange.max);",
                  "console.log('  ‚ö†Ô∏è Rango riesgo:', response.filters.riskRange.min + '-' + response.filters.riskRange.max);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"searchQuery\": \"gobierno\",\n  \"startDate\": \"2025-01-01\",\n  \"endDate\": \"2025-01-31\",\n  \"contentTypes\": [\"TWEET\", \"NEWS\"],\n  \"sources\": [\"Twitter\"],\n  \"tags\": [\"pol√≠tica\"],\n  \"minSentiment\": 30,\n  \"maxSentiment\": 100,\n  \"minRisk\": 0,\n  \"maxRisk\": 50,\n  \"sortBy\": \"createdAt\",\n  \"sortOrder\": \"desc\",\n  \"page\": 1,\n  \"limit\": 20,\n  \"includeArchived\": false,\n  \"groupBy\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/dashboard/advanced/search",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "advanced", "search"]
            },
            "description": "B√∫squeda avanzada con filtros m√∫ltiples: texto, fechas, tipos, fuentes, sentimiento, riesgo, etc."
          },
          "response": []
        },
        {
          "name": "Search Suggestions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üí° SUGERENCIAS DE B√öSQUEDA:');",
                  "if (response.entities) {",
                  "    console.log('üë• Entidades (' + response.entities.length + '):', response.entities.slice(0, 5).join(', '));",
                  "}",
                  "if (response.sources) {",
                  "    console.log('üì∞ Fuentes (' + response.sources.length + '):', response.sources.slice(0, 3).join(', '));",
                  "}",
                  "if (response.tags) {",
                  "    console.log('üè∑Ô∏è Tags (' + response.tags.length + '):', response.tags.slice(0, 5).join(', '));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/search/suggestions?query=mor&type=all&limit=10",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "search", "suggestions"],
              "query": [
                {
                  "key": "query",
                  "value": "mor",
                  "description": "Texto parcial para b√∫squeda de sugerencias"
                },
                {
                  "key": "type",
                  "value": "all",
                  "description": "Tipo: all, entities, sources, tags"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "N√∫mero m√°ximo de sugerencias por tipo"
                }
              ]
            },
            "description": "Obtener sugerencias para autocompletado de b√∫squedas"
          },
          "response": []
        },
        {
          "name": "Filter Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä ESTAD√çSTICAS DE FILTROS:');",
                  "console.log('üìä Total filtrado:', response.totalFiltered || 0);",
                  "if (response.contentTypes) {",
                  "    console.log('üìù Distribuci√≥n tipos:');",
                  "    response.contentTypes.forEach(ct => {",
                  "        console.log('  ' + ct.type + ': ' + ct._count + ' elementos');",
                  "    });",
                  "}",
                  "if (response.dateRange) {",
                  "    console.log('üìÖ Rango fechas:', new Date(response.dateRange.min_date).toLocaleDateString() + ' - ' + new Date(response.dateRange.max_date).toLocaleDateString());",
                  "}",
                  "if (response.sentimentDistribution) {",
                  "    console.log('üòä Distribuci√≥n sentimiento:', response.sentimentDistribution.length + ' grupos');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"startDate\": \"2025-01-01\",\n  \"endDate\": \"2025-01-31\",\n  \"contentTypes\": [\"TWEET\"],\n  \"minSentiment\": 0,\n  \"maxSentiment\": 100\n}"
            },
            "url": {
              "raw": "{{base_url}}/dashboard/filters/stats",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "filters", "stats"]
            },
            "description": "Obtener estad√≠sticas para la selecci√≥n actual de filtros"
          },
          "response": []
        },
        {
          "name": "Export Data (CSV)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Export response structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('format');",
                  "    pm.expect(jsonData).to.have.property('estimatedRecords');",
                  "    pm.expect(jsonData).to.have.property('exportId');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('last_export_id', response.exportId);",
                  "console.log('üì§ EXPORTACI√ìN PROGRAMADA:');",
                  "console.log('üìä Estado:', response.status);",
                  "console.log('üìÑ Formato:', response.format);",
                  "console.log('üìã Registros estimados:', response.estimatedRecords);",
                  "console.log('üÜî Export ID:', response.exportId);",
                  "console.log('üí¨ Mensaje:', response.message);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"format\": \"csv\",\n  \"startDate\": \"2025-01-01\",\n  \"endDate\": \"2025-01-31\",\n  \"contentTypes\": [\"TWEET\", \"NEWS\"],\n  \"fields\": [\"createdAt\", \"sentiment\", \"threatLevel\", \"tags\"],\n  \"includeMetadata\": true,\n  \"minRisk\": 50\n}"
            },
            "url": {
              "raw": "{{base_url}}/dashboard/export",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "export"]
            },
            "description": "Exportar datos del dashboard con filtros. Formatos: csv, xlsx, json, pdf"
          },
          "response": []
        },
        {
          "name": "Export Data (Excel)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"format\": \"xlsx\",\n  \"startDate\": \"2025-01-01\",\n  \"endDate\": \"2025-01-31\",\n  \"includeMetadata\": true,\n  \"groupBy\": \"source\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/dashboard/export",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "export"]
            },
            "description": "Exportar datos del dashboard en formato Excel con agrupaci√≥n"
          },
          "response": []
        },
        {
          "name": "Aggregated Trends (Daily)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Trends structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interval');",
                  "    pm.expect(jsonData).to.have.property('trends');",
                  "    pm.expect(jsonData).to.have.property('metadata');",
                  "    pm.expect(jsonData.metadata).to.have.property('totalPeriods');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìà TENDENCIAS AGREGADAS:');",
                  "console.log('‚è∞ Intervalo:', response.interval);",
                  "console.log('üìä Per√≠odos totales:', response.metadata.totalPeriods);",
                  "console.log('üìÖ Rango:', response.metadata.startDate + ' - ' + response.metadata.endDate);",
                  "console.log('üìã Datos de tendencias:', response.trends.length + ' puntos');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/trends/aggregated?startDate=2025-01-01&endDate=2025-01-07&aggregationInterval=day",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "trends", "aggregated"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-07"
                },
                {
                  "key": "aggregationInterval",
                  "value": "day",
                  "description": "day, hour, week, month"
                }
              ]
            },
            "description": "Obtener tendencias agregadas con intervalos personalizados"
          },
          "response": []
        },
        {
          "name": "Aggregated Trends (Hourly)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/trends/aggregated?startDate=2025-01-30&endDate=2025-01-31&aggregationInterval=hour",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "trends", "aggregated"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-30"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-31"
                },
                {
                  "key": "aggregationInterval",
                  "value": "hour"
                }
              ]
            },
            "description": "Tendencias agregadas por horas (√∫til para an√°lisis de per√≠odos cortos)"
          },
          "response": []
        },
        {
          "name": "Comparative Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comparative structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('currentPeriod');",
                  "    pm.expect(jsonData).to.have.property('previousPeriod');",
                  "    pm.expect(jsonData).to.have.property('changes');",
                  "    pm.expect(jsonData.changes).to.have.property('totalTweets');",
                  "    pm.expect(jsonData.changes).to.have.property('totalNews');",
                  "    pm.expect(jsonData.changes).to.have.property('averageSentiment');",
                  "    pm.expect(jsonData.changes).to.have.property('averageRisk');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä ANAL√çTICA COMPARATIVA:');",
                  "console.log('üìÖ Per√≠odo actual:', new Date(response.currentPeriod.start).toLocaleDateString() + ' - ' + new Date(response.currentPeriod.end).toLocaleDateString());",
                  "console.log('üìÖ Per√≠odo anterior:', new Date(response.previousPeriod.start).toLocaleDateString() + ' - ' + new Date(response.previousPeriod.end).toLocaleDateString());",
                  "console.log('üìà CAMBIOS:');",
                  "console.log('  üê¶ Tweets: ' + response.changes.totalTweets.value + ' (' + response.changes.totalTweets.percentage.toFixed(1) + '%)');",
                  "console.log('  üì∞ Noticias: ' + response.changes.totalNews.value + ' (' + response.changes.totalNews.percentage.toFixed(1) + '%)');",
                  "console.log('  üö® Alertas: ' + response.changes.totalAlerts.value + ' (' + response.changes.totalAlerts.percentage.toFixed(1) + '%)');",
                  "console.log('  üòä Sentimiento: ' + response.changes.averageSentiment.value.toFixed(2) + ' (' + response.changes.averageSentiment.percentage.toFixed(1) + '%)');",
                  "console.log('  ‚ö†Ô∏è Riesgo: ' + response.changes.averageRisk.value.toFixed(2) + ' (' + response.changes.averageRisk.percentage.toFixed(1) + '%)');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Tenant-ID",
                "value": "{{tenant_id}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/dashboard/analytics/comparative?startDate=2025-01-15&endDate=2025-01-22",
              "host": ["{{base_url}}"],
              "path": ["dashboard", "analytics", "comparative"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-15",
                  "description": "Inicio del per√≠odo a comparar"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-22",
                  "description": "Fin del per√≠odo a comparar"
                }
              ]
            },
            "description": "Comparar m√©tricas entre dos per√≠odos (actual vs anterior del mismo tama√±o)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_role",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tweet_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tweet_content_hash",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_news_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_analysis_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "first_job_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_export_id",
      "value": "",
      "type": "string"
    }
  ]
}