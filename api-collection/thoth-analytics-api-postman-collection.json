{
  "info": {
    "_postman_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "name": "Thoth Analytics API - Sprint 03",
    "description": "Colecci√≥n completa de endpoints para Thoth Analytics API con autenticaci√≥n JWT, multi-tenancy, sistema de auditor√≠a y scraper integration",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "üè• Health",
      "item": [
        {
          "name": "Welcome",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîê Auth",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test de respuesta exitosa",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('accessToken');",
                  "    pm.expect(jsonData.data).to.have.property('refreshToken');",
                  "});",
                  "",
                  "// üéØ GUARDAR TOKENS AUTOM√ÅTICAMENTE",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.accessToken) {",
                  "    pm.collectionVariables.set(\"auth_token\", response.data.accessToken);",
                  "    pm.collectionVariables.set(\"refresh_token\", response.data.refreshToken);",
                  "    pm.collectionVariables.set(\"user_id\", response.user.id);",
                  "    pm.collectionVariables.set(\"tenant_id\", response.user.tenantId);",
                  "    pm.collectionVariables.set(\"user_role\", response.user.role);",
                  "    ",
                  "    console.log('‚úÖ Tokens guardados autom√°ticamente!');",
                  "    console.log('üë§ Usuario:', response.user.email);",
                  "    console.log('üîë Rol:', response.user.role);",
                  "    console.log('üè¢ Tenant:', response.user.tenantId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@thoth.mx\",\n  \"password\": \"SuperAdmin2025!@#\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Endpoint de autenticaci√≥n. Los tokens se guardan autom√°ticamente en las variables de la colecci√≥n."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// üîÑ ACTUALIZAR TOKENS AUTOM√ÅTICAMENTE",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.accessToken) {",
                  "    pm.collectionVariables.set(\"auth_token\", response.data.accessToken);",
                  "    pm.collectionVariables.set(\"refresh_token\", response.data.refreshToken);",
                  "    console.log('üîÑ Tokens actualizados!');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// üö™ LIMPIAR TOKENS AUTOM√ÅTICAMENTE",
                  "pm.collectionVariables.unset(\"auth_token\");",
                  "pm.collectionVariables.unset(\"refresh_token\");",
                  "pm.collectionVariables.unset(\"user_id\");",
                  "pm.collectionVariables.unset(\"tenant_id\");",
                  "pm.collectionVariables.unset(\"user_role\");",
                  "console.log('üö™ Sesi√≥n cerrada y tokens eliminados');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë• Users",
      "item": [
        {
          "name": "List Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "DIRECTOR_COMUNICACION",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nuevo.usuario@ejemplo.com\",\n  \"username\": \"nuevo_usuario\",\n  \"password\": \"Password123!@#\",\n  \"role\": \"ASISTENTE\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId"],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Violaci√≥n de pol√≠ticas de uso\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:userId/suspend",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId", "suspend"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reactivate User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/:userId/reactivate",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId", "reactivate"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmation\": \"DELETE_USER_PERMANENTLY\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:userId",
              "host": ["{{base_url}}"],
              "path": ["users", ":userId"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/stats",
              "host": ["{{base_url}}"],
              "path": ["users", "stats"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè¢ Tenants",
      "item": [
        {
          "name": "List Tenants",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants",
              "host": ["{{base_url}}"],
              "path": ["tenants"],
              "query": [
                {
                  "key": "status",
                  "value": "ACTIVE",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "GOVERNMENT_STATE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_tenant_id\", response.data.id);",
                  "    console.log('üè¢ Tenant creado:', response.data.name);",
                  "    console.log('üìç ID:', response.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gobierno del Estado de M√©xico\",\n  \"type\": \"GOVERNMENT_STATE\",\n  \"settings\": {\n    \"timezone\": \"America/Mexico_City\",\n    \"language\": \"es-MX\",\n    \"features\": {\n      \"aiAnalysis\": true,\n      \"alertSystem\": true,\n      \"newsMonitoring\": true,\n      \"tweetAnalysis\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants",
              "host": ["{{base_url}}"],
              "path": ["tenants"]
            },
            "description": "Solo SUPER_ADMIN puede crear tenants"
          },
          "response": []
        },
        {
          "name": "Get Tenant by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Gobierno del Estado de M√©xico - Actualizado\",\n  \"settings\": {\n    \"timezone\": \"America/Mexico_City\",\n    \"language\": \"es-MX\",\n    \"theme\": \"dark\",\n    \"features\": {\n      \"aiAnalysis\": true,\n      \"alertSystem\": true,\n      \"newsMonitoring\": true,\n      \"tweetAnalysis\": true,\n      \"clustering\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Falta de pago de licencia\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/suspend",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "suspend"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede suspender tenants"
          },
          "response": []
        },
        {
          "name": "Reactivate Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/reactivate",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "reactivate"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede reactivar tenants"
          },
          "response": []
        },
        {
          "name": "Delete Tenant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmation\": \"DELETE_TENANT_PERMANENTLY\",\n  \"reason\": \"Cierre definitivo de operaciones\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{last_tenant_id}}"
                }
              ]
            },
            "description": "Solo SUPER_ADMIN puede eliminar tenants. Requiere confirmaci√≥n expl√≠cita."
          },
          "response": []
        },
        {
          "name": "Get Tenant Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tenants/:tenantId/stats",
              "host": ["{{base_url}}"],
              "path": ["tenants", ":tenantId", "stats"],
              "variable": [
                {
                  "key": "tenantId",
                  "value": "{{tenant_id}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä Audit",
      "item": [
        {
          "name": "Get Audit Logs",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/logs",
              "host": ["{{base_url}}"],
              "path": ["audit", "logs"],
              "query": [
                {
                  "key": "action",
                  "value": "LOGIN",
                  "disabled": true
                },
                {
                  "key": "entityType",
                  "value": "USER",
                  "disabled": true
                },
                {
                  "key": "userId",
                  "value": "{{user_id}}",
                  "disabled": true
                },
                {
                  "key": "startDate",
                  "value": "2025-07-01",
                  "disabled": true
                },
                {
                  "key": "endDate",
                  "value": "2025-07-31",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "20",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Audit Stats",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/stats",
              "host": ["{{base_url}}"],
              "path": ["audit", "stats"],
              "query": [
                {
                  "key": "period",
                  "value": "week",
                  "description": "day, week, month, year"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Export Audit Logs",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"format\": \"CSV\",\n  \"filters\": {\n    \"startDate\": \"2025-07-01\",\n    \"endDate\": \"2025-07-31\",\n    \"action\": \"LOGIN\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/audit/export",
              "host": ["{{base_url}}"],
              "path": ["audit", "export"]
            },
            "description": "Formatos disponibles: CSV, JSON, PDF"
          },
          "response": []
        },
        {
          "name": "Get Anomalies",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/anomalies",
              "host": ["{{base_url}}"],
              "path": ["audit", "anomalies"],
              "query": [
                {
                  "key": "threshold",
                  "value": "10",
                  "description": "N√∫mero de intentos para considerar anomal√≠a"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check Integrity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"logIds\": [\"log-id-1\", \"log-id-2\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/audit/integrity",
              "host": ["{{base_url}}"],
              "path": ["audit", "integrity"]
            }
          },
          "response": []
        },
        {
          "name": "Get Logs by Entity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/entity/:entityType/:entityId",
              "host": ["{{base_url}}"],
              "path": ["audit", "entity", ":entityType", ":entityId"],
              "variable": [
                {
                  "key": "entityType",
                  "value": "USER"
                },
                {
                  "key": "entityId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Activity",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audit/users/:userId/activity",
              "host": ["{{base_url}}"],
              "path": ["audit", "users", ":userId", "activity"],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ],
              "query": [
                {
                  "key": "days",
                  "value": "30",
                  "description": "√öltimos N d√≠as de actividad"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîß Scrapers",
      "item": [
        {
          "name": "Create Tweet",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('tweetId');",
                  "    pm.expect(jsonData.data).to.have.property('contentHash');",
                  "    pm.expect(jsonData.data).to.have.property('isDuplicate');",
                  "});",
                  "",
                  "// Save tweet ID for further requests",
                  "const response = pm.response.json();",
                  "if (response.success && response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_tweet_id\", response.data.id);",
                  "    pm.collectionVariables.set(\"last_tweet_content_hash\", response.data.contentHash);",
                  "    console.log('üê¶ Tweet creado:', response.data.tweetId);",
                  "    console.log('üÜî ID:', response.data.id);",
                  "    console.log('üîó Hash:', response.data.contentHash);",
                  "    if (response.data.isDuplicate) {",
                  "        console.log('‚ö†Ô∏è Tweet duplicado detectado');",
                  "    } else {",
                  "        console.log('‚úÖ Tweet nuevo procesado');",
                  "        if (response.data.aiJobId) {",
                  "            console.log('ü§ñ Job IA creado:', response.data.aiJobId);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"1234567890123456789\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"authorName\": \"Usuario Ejemplo\",\n  \"authorHandle\": \"@usuario_ejemplo\",\n  \"content\": \"Este es un tweet de ejemplo para probar el endpoint de scrapers #test #ejemplo\",\n  \"publishedAt\": \"2025-07-30T15:30:00.000Z\",\n  \"hashtags\": [\"#test\", \"#ejemplo\", \"#scrapers\"],\n  \"mentions\": [\"@thoth_analytics\", \"@gobierno_mx\"],\n  \"mediaUrls\": [\n    {\n      \"url\": \"https://pbs.twimg.com/media/example.jpg\",\n      \"type\": \"photo\",\n      \"thumbnailUrl\": \"https://pbs.twimg.com/media/example_thumb.jpg\"\n    }\n  ],\n  \"engagement\": {\n    \"retweetCount\": 15,\n    \"likeCount\": 42,\n    \"replyCount\": 8,\n    \"quoteCount\": 3\n  },\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Endpoint para que el scraper Python env√≠e tweets capturados. Detecta duplicados autom√°ticamente y crea jobs de IA."
          },
          "response": []
        },
        {
          "name": "Create Tweet (Duplicate Test)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"1234567890123456789\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"authorName\": \"Usuario Ejemplo\",\n  \"authorHandle\": \"@usuario_ejemplo\",\n  \"content\": \"Este es un tweet de ejemplo para probar el endpoint de scrapers #test #ejemplo\",\n  \"publishedAt\": \"2025-07-30T15:30:00.000Z\",\n  \"hashtags\": [\"#test\", \"#ejemplo\", \"#scrapers\"],\n  \"mentions\": [\"@thoth_analytics\", \"@gobierno_mx\"],\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Mismo tweet para probar detecci√≥n de duplicados. Debe retornar isDuplicate: true"
          },
          "response": []
        },
        {
          "name": "Create News",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('tweetId');",
                  "    pm.expect(jsonData.data).to.have.property('contentHash');",
                  "});",
                  "",
                  "// Save news ID",
                  "const response = pm.response.json();",
                  "if (response.success && response.data && response.data.id) {",
                  "    pm.collectionVariables.set(\"last_news_id\", response.data.id);",
                  "    console.log('üì∞ Noticia creada:', response.data.id);",
                  "    if (response.data.isDuplicate) {",
                  "        console.log('‚ö†Ô∏è Noticia duplicada detectada');",
                  "    } else {",
                  "        console.log('‚úÖ Noticia nueva procesada');",
                  "        if (response.data.aiJobId) {",
                  "            console.log('ü§ñ Job IA creado:', response.data.aiJobId);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"{{last_tweet_id}}\",\n  \"mediaSourceId\": \"media-source-1\",\n  \"title\": \"Gobierno Anuncia Nuevas Pol√≠ticas de Transparencia\",\n  \"content\": \"El gobierno federal anunci√≥ hoy una serie de nuevas pol√≠ticas destinadas a mejorar la transparencia en las instituciones p√∫blicas. Las medidas incluyen la publicaci√≥n de datos en tiempo real sobre el uso de recursos p√∫blicos y la implementaci√≥n de sistemas de seguimiento ciudadano. Esta iniciativa forma parte de un esfuerzo m√°s amplio para combatir la corrupci√≥n y fortalecer la confianza p√∫blica en las instituciones gubernamentales.\",\n  \"url\": \"https://ejemplo.gob.mx/noticias/nuevas-politicas-transparencia-2025\",\n  \"extractedAt\": \"2025-07-30T15:35:00.000Z\",\n  \"tenantId\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/news",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "news"]
            },
            "description": "Endpoint para que el extractor Python env√≠e noticias extra√≠das de URLs. Requiere que el tweet asociado exista."
          },
          "response": []
        },
        {
          "name": "Scrapers Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Health check structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData).to.have.property('services');",
                  "    pm.expect(jsonData.services).to.have.property('database');",
                  "    pm.expect(jsonData).to.have.property('responseTime');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üè• Estado del servicio:', response.status);",
                  "console.log('‚è±Ô∏è Tiempo de respuesta:', response.responseTime + 'ms');",
                  "console.log('‚è∞ Uptime:', Math.floor(response.uptime / 60) + ' minutos');",
                  "console.log('üíæ Base de datos:', response.services.database);",
                  "",
                  "if (response.status === 'healthy') {",
                  "    console.log('‚úÖ Servicio de scrapers operativo');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Problemas detectados en el servicio');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/scrapers/health",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "health"]
            },
            "description": "Verificar estado del servicio de scrapers y conexiones a base de datos. No requiere autenticaci√≥n."
          },
          "response": []
        },
        {
          "name": "Scrapers Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stats structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('tweetsReceived');",
                  "    pm.expect(jsonData.data).to.have.property('newsReceived');",
                  "    pm.expect(jsonData.data).to.have.property('duplicatesBlocked');",
                  "    pm.expect(jsonData.data).to.have.property('aiJobsCreated');",
                  "    pm.expect(jsonData.data).to.have.property('avgResponseTime');",
                  "    pm.expect(jsonData.data).to.have.property('uptime');",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "console.log('üìä ESTAD√çSTICAS DE SCRAPERS:');",
                  "console.log('üê¶ Tweets recibidos:', response.data.tweetsReceived);",
                  "console.log('üì∞ Noticias recibidas:', response.data.newsReceived);",
                  "console.log('üö´ Duplicados bloqueados:', response.data.duplicatesBlocked);",
                  "console.log('ü§ñ Jobs IA creados:', response.data.aiJobsCreated);",
                  "console.log('‚ö° Tiempo promedio:', response.data.avgResponseTime + 'ms');",
                  "console.log('‚è∞ Uptime:', Math.floor(response.data.uptime / 60) + ' minutos');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/scrapers/stats",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "stats"]
            },
            "description": "Obtener estad√≠sticas del servicio de scrapers: tweets/noticias procesadas, duplicados, performance, etc."
          },
          "response": []
        },
        {
          "name": "Test Throttling (High Volume)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Este test puede devolver 429 si el throttling est√° habilitado",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Throttling working - Rate limit exceeded\", function () {",
                  "        pm.response.to.have.status(429);",
                  "    });",
                  "    console.log('üö¶ Rate limiting est√° funcionando correctamente');",
                  "    console.log('‚ö†Ô∏è Demasiadas requests - throttling activado');",
                  "} else if (pm.response.code === 201) {",
                  "    pm.test(\"Request successful - Within rate limits\", function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "    console.log('‚úÖ Request dentro de los l√≠mites de throttling');",
                  "} else {",
                  "    pm.test(\"Unexpected response\", function () {",
                  "        pm.expect.fail('Status code: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tweetId\": \"{{$randomInt}}\",\n  \"mediaSourceId\": \"media-source-test\",\n  \"authorName\": \"Test Throttling\",\n  \"authorHandle\": \"@test_throttling\",\n  \"content\": \"Tweet para probar throttling - {{$timestamp}}\",\n  \"publishedAt\": \"{{$isoTimestamp}}\",\n  \"tenantId\": \"test-tenant-throttling\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/scrapers/tweets",
              "host": ["{{base_url}}"],
              "path": ["scrapers", "tweets"]
            },
            "description": "Request para probar throttling. Ejecutar m√∫ltiples veces r√°pido para verificar rate limiting. Configurar THROTTLING_ENABLED=true en .env"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_role",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tenant_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tweet_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_tweet_content_hash",
      "value": "",
      "type": "string"
    },
    {
      "key": "last_news_id",
      "value": "",
      "type": "string"
    }
  ]
}