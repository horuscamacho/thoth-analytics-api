{
  "_type": "export",
  "__export_format": 4,
  "__export_date": "2025-07-30T05:00:00.000Z",
  "__export_source": "insomnia.desktop.app:v2023.5.8",
  "resources": [
    {
      "_id": "req_welcome",
      "parentId": "fld_health",
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "request",
      "url": "{{ _.base_url }}",
      "name": "üè† Welcome Message",
      "description": "Endpoint principal que devuelve mensaje de bienvenida del sistema",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675200000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Status is 200",
          "code": "const response = await insomnia.send();\nexpect(response.status).to.equal(200);"
        }
      ]
    },
    {
      "_id": "req_health_basic",
      "parentId": "fld_health",
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "request",
      "url": "{{ _.base_url }}/health",
      "name": "‚úÖ API Health Check",
      "description": "Health check b√°sico del sistema - verifica que la API est√© funcionando",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Accept",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675100000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Health Check Validation",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('status', 'ok');\nexpected(data).to.have.property('service', 'thoth-analytics-api');\nexpect(data).to.have.property('timestamp');"
        }
      ]
    },
    {
      "_id": "req_auth_login",
      "parentId": "fld_auth",
      "modified": 1690675300000,
      "created": 1690675300000,
      "_type": "request",
      "url": "{{ _.base_url }}/auth/login",
      "name": "üîê Login",
      "description": "Autenticaci√≥n de usuario con email, password y tenant ID. Retorna access token y refresh token.",
      "method": "POST",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"email\": \"admin@demo.com\",\n  \"password\": \"TempPass123!\",\n  \"tenantId\": \"tenant-demo\"\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675300000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Login Success and Token Extraction",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Login successful');\nexpect(data).to.have.property('data');\nexpect(data.data).to.have.property('accessToken');\nexpect(data.data).to.have.property('refreshToken');\nexpect(data).to.have.property('user');\nexpect(data.user).to.have.property('email');\nexpect(data.user).to.have.property('role');\n\n// ‚ú® AUTO-SAVE TOKENS TO ENVIRONMENT\nif (data.data.accessToken) {\n  insomnia.environment.auth_token = data.data.accessToken;\n  insomnia.environment.refresh_token = data.data.refreshToken;\n  insomnia.environment.user_id = data.user.id;\n  insomnia.environment.tenant_id = data.user.tenantId;\n  insomnia.environment.user_role = data.user.role;\n  console.log('üéØ Tokens automatically saved to environment!');\n  console.log(`üë§ Logged in as: ${data.user.email} (${data.user.role})`);\n  console.log(`üè¢ Tenant: ${data.user.tenantId}`);\n}"
        }
      ]
    },
    {
      "_id": "req_auth_refresh",
      "parentId": "fld_auth",
      "modified": 1690675290000,
      "created": 1690675290000,
      "_type": "request",
      "url": "{{ _.base_url }}/auth/refresh",
      "name": "üîÑ Refresh Token",
      "description": "Renueva el access token utilizando un refresh token v√°lido",
      "method": "POST",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"refreshToken\": \"{{ _.refresh_token }}\"\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675290000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Token Refresh and Auto-Update",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Token refreshed successfully');\nexpect(data).to.have.property('data');\nexpect(data.data).to.have.property('accessToken');\nexpect(data.data).to.have.property('refreshToken');\n\n// ‚ú® AUTO-UPDATE TOKENS IN ENVIRONMENT\nif (data.data.accessToken) {\n  insomnia.environment.auth_token = data.data.accessToken;\n  insomnia.environment.refresh_token = data.data.refreshToken;\n  console.log('üîÑ Tokens automatically refreshed and updated!');\n}"
        }
      ]
    },
    {
      "_id": "req_auth_logout",
      "parentId": "fld_auth",
      "modified": 1690675280000,
      "created": 1690675280000,
      "_type": "request",
      "url": "{{ _.base_url }}/auth/logout",
      "name": "üö™ Logout",
      "description": "Cierra sesi√≥n del usuario (requiere autenticaci√≥n)",
      "method": "POST",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675280000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Logout Success and Clean Environment",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Logout successful');\n\n// ‚ú® AUTO-CLEAR TOKENS FROM ENVIRONMENT\ninsomnia.environment.auth_token = '';\ninsomnia.environment.refresh_token = '';\ninsomnia.environment.user_id = '';\ninsomnia.environment.user_role = '';\nconsole.log('üö™ Logged out - tokens automatically cleared from environment');"
        }
      ]
    },
    {
      "_id": "req_auth_profile",
      "parentId": "fld_auth",
      "modified": 1690675270000,
      "created": 1690675270000,
      "_type": "request",
      "url": "{{ _.base_url }}/auth/profile",
      "name": "üë§ Get Profile",
      "description": "Obtiene informaci√≥n del perfil del usuario autenticado",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675270000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Profile Access Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 401) {\n  console.log('‚ùå Token expired or invalid. Try refreshing token first.');\n  expect(response.status).to.equal(401);\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Profile retrieved successfully');\nexpect(data).to.have.property('data');\nexpect(data.data).to.have.property('id');\nexpect(data.data).to.have.property('email');\nexpect(data.data).to.have.property('role');\nconsole.log(`üë§ Profile: ${data.data.email} (${data.data.role})`);"
        }
      ]
    },
    {
      "_id": "req_users_list",
      "parentId": "fld_users",
      "modified": 1690675350000,
      "created": 1690675350000,
      "_type": "request",
      "url": "{{ _.base_url }}/users",
      "name": "üë• List Users",
      "description": "Lista todos los usuarios del tenant actual",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "status",
          "value": "",
          "description": "Filter by status: ACTIVE, SUSPENDED"
        },
        {
          "name": "role",
          "value": "",
          "description": "Filter by role: DIRECTOR_COMUNICACION, LIDER, DIRECTOR_AREA, ASISTENTE"
        }
      ],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675350000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Users List Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 401) {\n  console.log('‚ùå Token expired. Please login first.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpected(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Users retrieved successfully');\nexpect(data).to.have.property('data');\nexpect(Array.isArray(data.data)).to.be.true;\nconsole.log(`üë• Found ${data.data.length} users`);"
        }
      ]
    },
    {
      "_id": "req_users_create",
      "parentId": "fld_users",
      "modified": 1690675340000,
      "created": 1690675340000,
      "_type": "request",
      "url": "{{ _.base_url }}/users",
      "name": "‚ûï Create User",
      "description": "Crea un nuevo usuario en el tenant actual (solo DIRECTOR_COMUNICACION)",
      "method": "POST",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"email\": \"nuevo@demo.com\",\n  \"username\": \"nuevo_usuario\",\n  \"role\": \"ANALISTA\"\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675340000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "User Creation Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only DIRECTOR_COMUNICACION can create users.');\n  return;\n}\n\nif (response.status === 401) {\n  console.log('‚ùå Token expired. Please login first.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(201);\nexpect(data).to.have.property('message', 'User created successfully');\nexpect(data).to.have.property('data');\nexpected(data.data).to.have.property('temporaryPassword');\nconsole.log(`‚úÖ User created: ${data.data.email}`);\nconsole.log(`üîë Temporary password: ${data.data.temporaryPassword}`);"
        }
      ]
    },
    {
      "_id": "req_users_get_by_id",
      "parentId": "fld_users",
      "modified": 1690675330000,
      "created": 1690675330000,
      "_type": "request",
      "url": "{{ _.base_url }}/users/USER_ID_HERE",
      "name": "üéØ Get User by ID",
      "description": "Obtiene un usuario espec√≠fico por su ID",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675330000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Get User by ID Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 404) {\n  console.log('‚ùå User not found. Check the user ID.');\n  return;\n}\n\nif (response.status === 401) {\n  console.log('‚ùå Token expired. Please login first.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'User retrieved successfully');\nexpect(data).to.have.property('data');\nconsole.log(`üë§ User: ${data.data.email} (${data.data.role})`);"
        }
      ]
    },
    {
      "_id": "req_users_suspend",
      "parentId": "fld_users",
      "modified": 1690675320000,
      "created": 1690675320000,
      "_type": "request",
      "url": "{{ _.base_url }}/users/USER_ID_HERE/suspend",
      "name": "‚õî Suspend User",
      "description": "Suspende un usuario (solo DIRECTOR_COMUNICACION)",
      "method": "PUT",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"reason\": \"Violation of company policy\"\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675320000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "User Suspension Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only DIRECTOR_COMUNICACION can suspend users.');\n  return;\n}\n\nif (response.status === 404) {\n  console.log('‚ùå User not found.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'User suspended successfully');\nconsole.log('‚õî User suspended successfully.');"
        }
      ]
    },
    {
      "_id": "req_users_reactivate",
      "parentId": "fld_users",
      "modified": 1690675310000,
      "created": 1690675310000,
      "_type": "request",
      "url": "{{ _.base_url }}/users/USER_ID_HERE/reactivate",
      "name": "‚úÖ Reactivate User",  
      "description": "Reactiva un usuario suspendido (solo DIRECTOR_COMUNICACION)",
      "method": "PUT",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675310000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "User Reactivation Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only DIRECTOR_COMUNICACION can reactivate users.');\n  return;\n}\n\nconarest data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpected(data).to.have.property('message', 'User reactivated successfully');\nconsole.log('‚úÖ User reactivated successfully.');"
        }
      ]
    },
    {
      "_id": "req_users_delete",
      "parentId": "fld_users",
      "modified": 1690675300000,
      "created": 1690675300000,
      "_type": "request",
      "url": "{{ _.base_url }}/users/USER_ID_HERE",
      "name": "üóëÔ∏è Delete User",
      "description": "Elimina un usuario permanentemente (solo DIRECTOR_COMUNICACION)",
      "method": "DELETE",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"reason\": \"Account closure requested\"\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675300000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "User Deletion Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only DIRECTOR_COMUNICACION can delete users.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'User deleted successfully');\nconsole.log('üóëÔ∏è User deleted permanently.');"
        }
      ]
    },
    {
      "_id": "req_tenants_list",
      "parentId": "fld_tenants",
      "modified": 1690675400000,
      "created": 1690675400000,
      "_type": "request",
      "url": "{{ _.base_url }}/tenants",
      "name": "üè¢ List Tenants",
      "description": "Lista tenants (SUPER_ADMIN ve todos, otros solo el suyo)",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "status",
          "value": "",
          "description": "Filter by status: ACTIVE, SUSPENDED"
        },
        {
          "name": "type",
          "value": "",
          "description": "Filter by type: GOVERNMENT_STATE, GOVERNMENT_MUNICIPAL, HIGH_PROFILE"
        }
      ],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675400000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Tenants List Test",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Tenants retrieved successfully');\nexpected(data).to.have.property('data');\nexpect(Array.isArray(data.data)).to.be.true;\nconsole.log(`üè¢ Found ${data.total} tenants`);"
        }
      ]
    },
    {
      "_id": "req_tenants_create",
      "parentId": "fld_tenants",
      "modified": 1690675390000,
      "created": 1690675390000,
      "_type": "request",
      "url": "{{ _.base_url }}/tenants",
      "name": "‚ûï Create Tenant",
      "description": "Crea un nuevo tenant (solo SUPER_ADMIN)",
      "method": "POST",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"name\": \"Nuevo Tenant Demo\",\n  \"type\": \"GOVERNMENT_STATE\",\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"language\": \"es\"\n  }\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675390000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Tenant Creation Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only SUPER_ADMIN can create tenants.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(201);\nexpected(data).to.have.property('message', 'Tenant created successfully');\nconsole.log(`‚úÖ Tenant created: ${data.data.name}`);"
        }
      ]
    },
    {
      "_id": "req_tenants_get_by_id",
      "parentId": "fld_tenants",
      "modified": 1690675380000,
      "created": 1690675380000,
      "_type": "request",
      "url": "{{ _.base_url }}/tenants/TENANT_ID_HERE",
      "name": "üéØ Get Tenant by ID",
      "description": "Obtiene un tenant espec√≠fico por su ID",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675380000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Get Tenant by ID Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 404) {\n  console.log('‚ùå Tenant not found.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Tenant retrieved successfully');\nconsole.log(`üè¢ Tenant: ${data.data.name} (${data.data.type})`);"
        }
      ]
    },
    {
      "_id": "req_tenants_update",
      "parentId": "fld_tenants",
      "modified": 1690675370000,
      "created": 1690675370000,
      "_type": "request",
      "url": "{{ _.base_url }}/tenants/TENANT_ID_HERE",
      "name": "‚úèÔ∏è Update Tenant",
      "description": "Actualiza un tenant (SUPER_ADMIN o propietario)",
      "method": "PUT",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"name\": \"Tenant Actualizado\",\n  \"settings\": {\n    \"theme\": \"light\",\n    \"notifications\": true\n  }\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675370000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Tenant Update Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied to update this tenant.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Tenant updated successfully');\nconsole.log('‚úèÔ∏è Tenant updated successfully.');"
        }
      ]
    },
    {
      "_id": "req_tenants_stats",
      "parentId": "fld_tenants",
      "modified": 1690675360000,
      "created": 1690675360000,
      "_type": "request",
      "url": "{{ _.base_url }}/tenants/TENANT_ID_HERE/stats",
      "name": "üìä Get Tenant Stats",
      "description": "Obtiene estad√≠sticas del tenant",
      "method": "GET",
      "body": {},
      "parameters": [],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675360000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Tenant Stats Test",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Tenant statistics retrieved successfully');\nexpect(data).to.have.property('data');\nexpect(data.data).to.have.property('users');\nexpect(data.data).to.have.property('content');\nexpect(data.data).to.have.property('alerts');\nconsole.log(`üìä Stats - Users: ${data.data.users.total}, Content: ${data.data.content.tweets + data.data.content.news}`);"
        }
      ]
    },
    {
      "_id": "req_audit_logs",
      "parentId": "fld_audit",
      "modified": 1690675450000,
      "created": 1690675450000,
      "_type": "request",
      "url": "{{ _.base_url }}/audit/logs",
      "name": "üìã Get Audit Logs",
      "description": "Obtiene logs de auditor√≠a (solo DIRECTOR_COMUNICACION)",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "action",
          "value": "",
          "description": "Filter by action type"
        },
        {
          "name": "entityType",
          "value": "",
          "description": "Filter by entity type"
        },
        {
          "name": "startDate",
          "value": "",
          "description": "Filter from date (ISO string)"
        },
        {
          "name": "endDate",
          "value": "",
          "description": "Filter to date (ISO string)"
        },
        {
          "name": "page",
          "value": "1",
          "description": "Page number"
        },
        {
          "name": "limit",
          "value": "10",
          "description": "Items per page"
        }
      ],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675450000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Audit Logs Test",
          "code": "const response = await insomnia.send();\n\nif (response.status === 403) {\n  console.log('‚ùå Access denied. Only DIRECTOR_COMUNICACION can view audit logs.');\n  return;\n}\n\nconst data = JSON.parse(response.body);\nexpect(response.status).to.equal(200);\nexpected(data).to.have.property('message', 'Audit logs retrieved successfully');\nexpect(data).to.have.property('data');\nconsole.log(`üìã Found ${data.pagination.total} audit logs`);"
        }
      ]
    },
    {
      "_id": "req_audit_stats",
      "parentId": "fld_audit",
      "modified": 1690675440000,
      "created": 1690675440000,
      "_type": "request",
      "url": "{{ _.base_url }}/audit/stats",
      "name": "üìä Get Audit Stats",
      "description": "Obtiene estad√≠sticas de auditor√≠a",
      "method": "GET",
      "body": {},
      "parameters": [
        {
          "name": "period",
          "value": "7d",
          "description": "Period: 1d, 7d, 30d, 90d"
        }
      ],
      "headers": [
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675440000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Audit Stats Test",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Audit statistics retrieved successfully');\nexpected(data).to.have.property('data');\nconsole.log(`üìä Audit events in last 7 days: ${data.data.totalEvents}`);"
        }
      ]
    },
    {
      "_id": "req_audit_export",
      "parentId": "fld_audit",
      "modified": 1690675430000,
      "created": 1690675430000,
      "_type": "request",
      "url": "{{ _.base_url }}/audit/export",
      "name": "üì§ Export Audit Logs",
      "description": "Exporta logs de auditor√≠a en formato CSV/JSON",
      "method": "POST",
      "body": {
        "mimeType": "application/json",
        "text": "{\n  \"format\": \"csv\",\n  \"startDate\": \"2025-07-01T00:00:00.000Z\",\n  \"endDate\": \"2025-07-30T23:59:59.999Z\",\n  \"actions\": [\"USER_CREATED\", \"USER_UPDATED\", \"LOGIN\"]\n}"
      },
      "parameters": [],
      "headers": [
        {
          "name": "Content-Type",
          "value": "application/json"
        },
        {
          "name": "Authorization",
          "value": "Bearer {{ _.auth_token }}"
        }
      ],
      "authentication": {},
      "metaSortKey": -1690675430000,
      "isPrivate": false,
      "settingStoreCookies": true,
      "settingSendCookies": true,
      "settingDisableRenderRequestBody": false,
      "settingEncodeUrl": true,
      "settingRebuildPath": true,
      "tests": [
        {
          "name": "Audit Export Test",
          "code": "const response = await insomnia.send();\nconst data = JSON.parse(response.body);\n\nexpect(response.status).to.equal(200);\nexpect(data).to.have.property('message', 'Audit logs exported successfully');\nexpect(data).to.have.property('data');\nconsole.log(`üì§ Export created with ${data.data.totalRecords} records`);"
        }
      ]
    },
    {
      "_id": "fld_auth",
      "parentId": "wrk_main",
      "modified": 1690675300000,
      "created": 1690675300000,
      "_type": "request_group",
      "name": "üîê Auth & Security",
      "description": "Endpoints de autenticaci√≥n, autorizaci√≥n y seguridad del sistema",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1690675300000
    },
    {
      "_id": "fld_users",
      "parentId": "wrk_main",
      "modified": 1690675350000,
      "created": 1690675350000,
      "_type": "request_group",
      "name": "üë• User Management",
      "description": "Gesti√≥n de usuarios con multi-tenancy y control de roles",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1690675350000
    },
    {
      "_id": "fld_tenants",
      "parentId": "wrk_main",
      "modified": 1690675400000,
      "created": 1690675400000,
      "_type": "request_group",
      "name": "üè¢ Tenant Management",
      "description": "Gesti√≥n de tenants - organizaciones del sistema",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1690675400000
    },
    {
      "_id": "fld_audit",
      "parentId": "wrk_main",
      "modified": 1690675450000,
      "created": 1690675450000,
      "_type": "request_group",
      "name": "üìã Audit & Compliance",
      "description": "Sistema de auditor√≠a y trazabilidad completa",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1690675450000
    },
    {
      "_id": "fld_health",
      "parentId": "wrk_main",
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "request_group",
      "name": "üìä Health Checks",
      "description": "Endpoints para verificar el estado del sistema y sus componentes",
      "environment": {},
      "environmentPropertyOrder": null,
      "metaSortKey": -1690675200000
    },
    {
      "_id": "wrk_main",
      "parentId": null,
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "workspace",
      "name": "Thoth Analytics API - Sprint 02",
      "description": "API para sistema de inteligencia de comunicaci√≥n gubernamental - Sprint 02: Auth & Multi-tenancy",
      "scope": "collection"
    },
    {
      "_id": "env_base",
      "parentId": "wrk_main",
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "environment",
      "name": "Base Environment",
      "data": {
        "base_url": "http://localhost:3000",
        "api_version": "v1",
        "auth_token": "",
        "refresh_token": "",
        "tenant_id": "",
        "user_id": "",
        "user_role": ""
      },
      "dataPropertyOrder": {
        "&": [
          "base_url",
          "api_version", 
          "auth_token",
          "refresh_token",
          "tenant_id",
          "user_id",
          "user_role"
        ]
      },
      "color": null,
      "isPrivate": false,
      "metaSortKey": 1690675200000
    },
    {
      "_id": "env_dev",
      "parentId": "env_base",
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "environment",
      "name": "Development",
      "data": {
        "base_url": "http://localhost:3000",
        "api_version": "v1"
      },
      "dataPropertyOrder": {
        "&": [
          "base_url",
          "api_version"
        ]
      },
      "color": "#28a745",
      "isPrivate": false,
      "metaSortKey": 1690675100000
    },
    {
      "_id": "env_prod",
      "parentId": "env_base", 
      "modified": 1690675200000,
      "created": 1690675200000,
      "_type": "environment",
      "name": "Production",
      "data": {
        "base_url": "https://api.thoth.mx",
        "api_version": "v1"
      },
      "dataPropertyOrder": {
        "&": [
          "base_url",
          "api_version"
        ]
      },
      "color": "#dc3545",
      "isPrivate": false,
      "metaSortKey": 1690675000000
    }
  ]
}