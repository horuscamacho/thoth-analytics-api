
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  email: 'email',
  username: 'username',
  role: 'role',
  status: 'status',
  settings: 'settings',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MediaSourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  baseUrl: 'baseUrl',
  twitterHandle: 'twitterHandle',
  selectors: 'selectors',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TweetScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tweetId: 'tweetId',
  mediaSourceId: 'mediaSourceId',
  authorName: 'authorName',
  authorHandle: 'authorHandle',
  content: 'content',
  publishedAt: 'publishedAt',
  hashtags: 'hashtags',
  mentions: 'mentions',
  mediaUrls: 'mediaUrls',
  engagement: 'engagement',
  contentHash: 'contentHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TweetMediaScalarFieldEnum = {
  id: 'id',
  tweetId: 'tweetId',
  type: 'type',
  url: 'url',
  metadata: 'metadata'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tweetId: 'tweetId',
  mediaSourceId: 'mediaSourceId',
  title: 'title',
  content: 'content',
  url: 'url',
  extractedAt: 'extractedAt',
  contentHash: 'contentHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiAnalysisScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tweetId: 'tweetId',
  newsId: 'newsId',
  type: 'type',
  prompt: 'prompt',
  response: 'response',
  sentiment: 'sentiment',
  relevance: 'relevance',
  threatLevel: 'threatLevel',
  tags: 'tags',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AiProcessingQueueScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tweetId: 'tweetId',
  newsId: 'newsId',
  queueType: 'queueType',
  priority: 'priority',
  status: 'status',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  scheduledAt: 'scheduledAt',
  processedAt: 'processedAt',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  severity: 'severity',
  status: 'status',
  metadata: 'metadata',
  triggeredAt: 'triggeredAt',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TenantType = exports.$Enums.TenantType = {
  GOVERNMENT_STATE: 'GOVERNMENT_STATE',
  GOVERNMENT_MUNICIPAL: 'GOVERNMENT_MUNICIPAL',
  HIGH_PROFILE: 'HIGH_PROFILE'
};

exports.TenantStatus = exports.$Enums.TenantStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.UserRole = exports.$Enums.UserRole = {
  DIRECTOR_COMUNICACION: 'DIRECTOR_COMUNICACION',
  GOBERNADOR: 'GOBERNADOR',
  SECRETARIO_GOBIERNO: 'SECRETARIO_GOBIERNO',
  SUBORDINADO: 'SUBORDINADO'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.MediaType = exports.$Enums.MediaType = {
  TWITTER: 'TWITTER',
  NEWS_WEBSITE: 'NEWS_WEBSITE',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO'
};

exports.AnalysisType = exports.$Enums.AnalysisType = {
  TWEET_ANALYSIS: 'TWEET_ANALYSIS',
  NEWS_ANALYSIS: 'NEWS_ANALYSIS',
  CLUSTER_ANALYSIS: 'CLUSTER_ANALYSIS',
  THREAT_DETECTION: 'THREAT_DETECTION'
};

exports.ThreatLevel = exports.$Enums.ThreatLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.QueueType = exports.$Enums.QueueType = {
  TWEET_ANALYSIS: 'TWEET_ANALYSIS',
  NEWS_ANALYSIS: 'NEWS_ANALYSIS',
  CLUSTER_ANALYSIS: 'CLUSTER_ANALYSIS',
  REACTIVATION_CHECK: 'REACTIVATION_CHECK'
};

exports.QueueStatus = exports.$Enums.QueueStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.AlertType = exports.$Enums.AlertType = {
  THREAT_DETECTED: 'THREAT_DETECTED',
  NEWS_MENTION: 'NEWS_MENTION',
  SENTIMENT_CHANGE: 'SENTIMENT_CHANGE',
  SYSTEM_ERROR: 'SYSTEM_ERROR',
  MANUAL_ALERT: 'MANUAL_ALERT'
};

exports.AlertSeverity = exports.$Enums.AlertSeverity = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  UNREAD: 'UNREAD',
  READ: 'READ',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  MediaSource: 'MediaSource',
  Tweet: 'Tweet',
  TweetMedia: 'TweetMedia',
  News: 'News',
  AiAnalysis: 'AiAnalysis',
  AiProcessingQueue: 'AiProcessingQueue',
  Alert: 'Alert'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
